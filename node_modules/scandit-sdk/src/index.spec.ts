/* tslint:disable:no-implicit-dependencies */
/**
 * Index tests
 */

import { test } from "ava";
import * as ScanditSDK from "scandit-sdk";

// Set inside setupBrowserEnv.js
const baseUrl: string = "https://example.com/";

test.serial("configure", async t => {
  let error: Error = await t.throws(ScanditSDK.configure(""));
  t.is(error.name, "UnsupportedBrowserError");

  ScanditSDK.BrowserHelper.checkBrowserCompatibility = () => {
    return {
      fullSupport: true,
      scannerSupport: true,
      missingFeatures: []
    };
  };

  error = await t.throws((<any>ScanditSDK.configure)(null));
  t.is(error.name, "NoLicenseKeyError");
  error = await t.throws(ScanditSDK.configure(""));
  t.is(error.name, "NoLicenseKeyError");
  error = await t.throws(ScanditSDK.configure(" "));
  t.is(error.name, "NoLicenseKeyError");
  await t.notThrows(ScanditSDK.configure("license_key"));
  t.is(ScanditSDK.userLicenseKey, "license_key");
  t.is(ScanditSDK.scanditEngineLocation, baseUrl);
  await t.notThrows(ScanditSDK.configure("license_key", { engineLocation: "" }));
  t.is(ScanditSDK.scanditEngineLocation, baseUrl);
  await t.notThrows(ScanditSDK.configure("license_key", { engineLocation: "/" }));
  t.is(ScanditSDK.scanditEngineLocation, baseUrl);
  await t.notThrows(ScanditSDK.configure("license_key", { engineLocation: "test" }));
  t.is(ScanditSDK.scanditEngineLocation, `${baseUrl}test/`);
  await t.notThrows(ScanditSDK.configure("license_key", { engineLocation: "https://another_example.com" }));
  t.is(ScanditSDK.scanditEngineLocation, "https://another_example.com/");
  await t.notThrows(ScanditSDK.configure("license_key", { engineLocation: "https://another_example.com/" }));
  t.is(ScanditSDK.scanditEngineLocation, "https://another_example.com/");
});
